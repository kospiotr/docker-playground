buildscript {
    ext {
        kotlinVersion = '1.1.2-4'
        springBootVersion = '1.5.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'

jar {
    baseName = "${artifactId}"
}

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task buildDocker(type: Exec) {
    doFirst {
        copy {
            from "src/main/docker/"
            into "build/docker/"
            include "*"
        }
        copy {
            from "build/libs"
            into "build/docker/"
            include "*.jar"
        }
    }
    def tag = "${groupId}/${artifactId}:${version}".toLowerCase()
    def os = org.gradle.internal.os.OperatingSystem.current()
    def architecture = System.getProperty("os.arch");
    def sourceDir = architecture == "arm" ? "build/docker-arm/Dockerfile" : "build/docker/Dockerfile"
    if (os.isWindows()) {
        commandLine 'cmd', '/c', 'docker', 'image', 'build', '-f', sourceDir, '-t', tag, 'build/docker/'
    } else {
        println("docker image build -f build/docker/Dockerfile -t ${tag} build/docker/")
        commandLine 'docker', 'image', 'build', '-f', sourceDir, '-t', tag, 'build/docker/'
    }
}

task runImage(type: Exec) {
    commandLine 'docker-compose -f src/main/docker/app.yml up'

}